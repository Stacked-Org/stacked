// Mocks generated by Mockito 5.0.17 from annotations
// in stacked_cli/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:stacked_cli/src/services/file_service.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i2.FileService {
  @override
  _i3.Future<void> writeFile(
          {_i4.File? file, String? fileContent, bool? verbose = false}) =>
      (super.noSuchMethod(
          Invocation.method(#writeFile, [],
              {#file: file, #fileContent: fileContent, #verbose: verbose}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<bool> fileExists({String? filePath}) => (super.noSuchMethod(
      Invocation.method(#fileExists, [], {#filePath: filePath}),
      returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<String> readFile({String? filePath}) => (super.noSuchMethod(
      Invocation.method(#readFile, [], {#filePath: filePath}),
      returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<List<_i4.FileSystemEntity>> getFilesInDirectory(
          {String? directoryPath}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFilesInDirectory, [], {#directoryPath: directoryPath}),
              returnValue: Future<List<_i4.FileSystemEntity>>.value(
                  <_i4.FileSystemEntity>[]))
          as _i3.Future<List<_i4.FileSystemEntity>>);
  @override
  _i3.Future<List<String>> getFoldersInDirectory({String? directoryPath}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getFoldersInDirectory, [], {#directoryPath: directoryPath}),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i3.Future<List<String>>);
  @override
  void log(String? message, {bool? verbose = false}) => super.noSuchMethod(
      Invocation.method(#log, [message], {#verbose: verbose}),
      returnValueForMissingStub: null);
  @override
  _i3.Future<bool> isProjectRoot() =>
      (super.noSuchMethod(Invocation.method(#isProjectRoot, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> isStakedApplication() =>
      (super.noSuchMethod(Invocation.method(#isStakedApplication, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
